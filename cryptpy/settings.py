"""
Django settings for cryptpy project.

Generated by 'django-admin startproject' using Django 3.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
import pymysql
import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ''

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']

AUTH_USER_MODEL = 'home.cryptUser'



AUTHENTICATION_BACKENDS = (
        'django.contrib.auth.backends.AllowAllUsersModelBackend',
        'home.backends.CaseInsensitiveModelBackend'
    )

    
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
	'home',
    'django_email_verification',
    'django_s3_storage',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    #  'django.middleware.cache.UpdateCacheMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.cache.FetchFromCacheMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'ratelimit.middleware.RatelimitMiddleware'
]

ROOT_URLCONF = 'cryptpy.urls'
RATELIMIT_VIEW = 'home.views.ratelimited_error'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'cryptpy.wsgi.application'
pymysql.install_as_MySQLdb()

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }

# if DEBUG:
#     DATABASES = {
#         'default' : {
#             'ENGINE' : 'django.db.backends.mysql',
#             'NAME':'kadkcrypt2024',
#             'USER':'root',
#             'PASSWORD':'Foun8993',
#             'HOST':'localhost',
#             'PORT':'3306'
#         }
#     }
# else:
DATABASES = {
    'default' : {
        'ENGINE' : 'django.db.backends.mysql',
        'NAME':'db',
        'USER':'root',
        'PASSWORD':'',
        'HOST':'',
        'PORT':'3306'
    }
}

# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
#         'LOCATION': 'crypt_cache',
#     }
# }
# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# if DEBUG == True:

#     CACHES = {
#         'default': {
#             'BACKEND': 'django.core.cache.backends.memcached.PyMemcacheCache',
#             'LOCATION': 'localhost:11211',
#         }
#     }
# else:
# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.memcached.PyMemcacheCache',
#         'LOCATION': 'cryptichunt-ztftlr.serverless.use1.cache.amazonaws.com:11211',
#     }
# }
CACHALOT_ONLY_CACHABLE_TABLES = frozenset('home_quesans')

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
# STATIC_ROOT = 'static'
STATICFILES_DIRS = (os.path.join(BASE_DIR,'static'),)
ALLOWED_HOSTS = ['*']
X_FRAME_OPTIONS = '*'


DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'
# STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'

def verified_callback(user):
    user.is_verified = True

# ----- AWS config ------

AWS_REGION = "us-east-1"
AWS_ACCESS_KEY_ID = ""
AWS_SECRET_ACCESS_KEY = ""

# ----- Email Verification -----
EMAIL_VERIFIED_CALLBACK = verified_callback
EMAIL_FROM_ADDRESS = ''
EMAIL_MAIL_SUBJECT = 'Confirm your email'
EMAIL_MAIL_HTML = 'mail_body.html'
EMAIL_MAIL_PLAIN = 'mail_body.txt'
EMAIL_TOKEN_LIFE = 60 * 60
EMAIL_PAGE_TEMPLATE = 'confirm_template.html'
EMAIL_PAGE_DOMAIN = 'https://cryptichunt-srmncr.co.in/'

# For Django Email Backend
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ""
# print(os.environ['password_key'])
EMAIL_USE_TLS = True

# ----- StaticFiles S3 bucket -------
AWS_S3_BUCKET_NAME = "cryptbucket"
# AWS_S3_ACCESS_KEY_ID = ""
# AWS_S3_SECRET_ACCESS_KEY =
# AWS_S3_MAX_AGE_SECONDS_CACHED_STATIC = 60 * 60 * 24 * 365
AWS_S3_BUCKET_NAME_STATIC = "cryptbucket"
AWS_S3_BUCKET_AUTH = False
AWS_S3_CUSTOM_DOMAIN = ""
AWS_S3_PUBLIC_URL = "%s/" % AWS_S3_CUSTOM_DOMAIN
AWS_S3_CUSTOM_DOMAIN_STATIC = ""
AWS_S3_PUBLIC_URL_STATIC = "%s/" % AWS_S3_CUSTOM_DOMAIN_STATIC
STATIC_URL = "%s/" % AWS_S3_CUSTOM_DOMAIN
STATICFILES_STORAGE = ""
AWS_S3_BUCKET_AUTH_STATIC = False
DEFAULT_FILE_STORAGE = "" #the media storage configurations

# AWS_DEFAULT_ACL = None

# STATIC_URL = 'https://%s/%s/' % (AWS_S3_CUSTOM_DOMAIN, AWS_LOCATION)

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

X_FRAME_OPTIONS = '*'
